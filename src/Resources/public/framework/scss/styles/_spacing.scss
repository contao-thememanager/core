:root {
  --gtr-btm:     #{$grid-gutter-bottom};
  --gtr-btm-sml: #{$grid-gutter-small-bottom};
}

$spacings-abbreviations: (
  spacing: spc,
  small:   sm,
  medium:  md,
  large:   lg
);

$spacings-init: (
  'small': $article-spacing-xs-small,
  'medium': $article-spacing-xs-medium,
  'large': $article-spacing-xs-large
);

$spacings-s: (
  'small': $article-spacing-s-small,
  'medium': $article-spacing-s-medium,
  'large': $article-spacing-s-large
);

$spacings-m: (
  'small': $article-spacing-m-small,
  'medium': $article-spacing-m-medium,
  'large': $article-spacing-m-large
);

$spacings-l: (
  'small': $article-spacing-l-small,
  'medium': $article-spacing-l-medium,
  'large': $article-spacing-l-large
);

$spacings-xl: (
  'small': $article-spacing-xl-small,
  'medium': $article-spacing-xl-medium,
  'large': $article-spacing-xl-large
);


@mixin spacings($list) {
  @each $size, $spacing in $list {
    .y-spacing-#{$size},
    .top-spacing-#{$size},
    .bottom-spacing-#{$size} {
      --#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)}: #{$spacing};
    }
    .y-spacing-#{$size} {
      &, #container {
        > .inside {
          padding-top: var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)});
          padding-bottom: calc(var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)}) - var(--gtr-btm));
        }
      }
      &.small-gutter {
        &, #container {
          > .inside {
            padding-bottom: calc(var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)}) - var(--gtr-btm-sml));
          }
        }
      }
      &.no-gutter {
        &, #container {
          > .inside {
            padding-bottom: var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)});
          }
        }
      }
    }
  }

  @each $size, $spacing in $list {
    .top-spacing-#{$size} {
      > .inside {
        padding-top: var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)});
      }
    }
    .bottom-spacing-#{$size} {
      > .inside {
        padding-bottom: calc(var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)}) - var(--gtr-btm));
      }
      &.small-gutter > .inside {
        padding-bottom: calc(var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)}) - var(--gtr-btm-sml));
      }
      &.no-gutter > .inside {
        padding-bottom: var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)});
      }
    }
  }
}

@mixin spacings-breakpoint($list, $bp) {

  @include media-breakpoint($bp) {
    @content;

    @each $size, $spacing in $list {
      .y-spacing-#{$size},
      .top-spacing-#{$size},
      .bottom-spacing-#{$size} {
        --#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)}: #{$spacing};
      }
    }
  }
}

.grid.no-gutter[class*='x-spacing'] { > .inside {
  padding-left: divide($grid-gutter-width, 2);
  padding-right: divide($grid-gutter-width, 2);
} }

.grid.small-gutter[class*='x-spacing'] { > .inside {
  padding-left: divide(sub($grid-gutter-width, $grid-gutter-small-width), 2);
  padding-right: divide(sub($grid-gutter-width, $grid-gutter-small-width), 2);
} }

@include spacings($spacings-init);

@include spacings-breakpoint($spacings-s, 's');

@include spacings-breakpoint($spacings-m, 'm') {
  .x-spacing-large > .inside {
    width: $x-spacing-large-m;
    margin-left: auto;
    margin-right: auto;
  }
};

@include spacings-breakpoint($spacings-l, 'l') {
  .grid.small-gutter[class*='x-spacing']{

    > .inside {
      padding-left: 0;
      padding-right: 0;
    }
  }

  .x-spacing-medium {
    &, #container {
      > .inside {
        width: sub(map-get($breakpoints, 'l'), $grid-gutter-width, 'px');
        margin-left: auto;
        margin-right: auto;
      }
    }

    &.small-gutter {
      &, #container {
        > .inside {
          width: sub(map-get($breakpoints, 'l'), $grid-gutter-small-width, 'px');
        }
      }
    }
  }

  .x-spacing-large {
    &, #container {
      > .inside {
        width: $x-spacing-large-l;
      }
    }
  }
};

@include spacings-breakpoint($spacings-xl, 'xl');

@media (min-width: sum($x-spacing-small, $grid-gutter-width, 'px')) {

  .x-spacing-small {
    &, #container {
      > .inside {
        width: $x-spacing-small;
        margin-left: auto;
        margin-right: auto;
      }
    }
  }
}
