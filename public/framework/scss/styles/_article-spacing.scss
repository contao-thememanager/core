$spacings-abbreviations: (
  spacing: spc,
  small:   sm,
  medium:  md,
  large:   lg
);

$spacings-list: (
  init: (
    small:  $article-spacing-xs-small,
    medium: $article-spacing-xs-medium,
    large:  $article-spacing-xs-large
  ),
  s: (
    small:  $article-spacing-s-small,
    medium: $article-spacing-s-medium,
    large:  $article-spacing-s-large
  ),
  m: (
    small:  $article-spacing-m-small,
    medium: $article-spacing-m-medium,
    large:  $article-spacing-m-large
  ),
  l: (
    small:  $article-spacing-l-small,
    medium: $article-spacing-l-medium,
    large:  $article-spacing-l-large
  ),
  xl: (
    small:  $article-spacing-xl-small,
    medium: $article-spacing-xl-medium,
    large:  $article-spacing-xl-large
  )
);

@mixin init-spacings($list) {
  // Set custom properties
  :root {
    @each $size, $spacing in $list {
      --#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)}: #{$spacing};
    }
  }

  @each $size, $spacing in $list {
    .y-spacing-#{$size} {
      &, #container {
        > .inside {
          padding: var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)}) 0;
        }
      }
    }
  }

  @each $size, $spacing in $list {
    .top-spacing-#{$size} {
      > .inside {
        padding-top: var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)});
      }
    }
    .bottom-spacing-#{$size} {
      > .inside {
        padding-bottom: var(--#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)});
      }
    }
  }
}

@mixin set-spacing-properties($list, $bp) {
  $list: map-get($list, $bp);
  @include media-breakpoint($bp) {
    :root {
      @each $size, $spacing in $list {
        --#{map-get($spacings-abbreviations, spacing)}-#{map-get($spacings-abbreviations, $size)}: #{$spacing};
      }
    }
    @content;
  }
}

[class*='x-spacing'] {
  // Set initial width value
  --art-wdth: auto;

  &, #container {

    > .inside {
      width: var(--art-wdth);
      margin-left: auto;
      margin-right: auto;
    }
  }

  &.no-gutter > .inside {
    padding-left:  divide($grid-gutter-width, 2);
    padding-right: divide($grid-gutter-width, 2);
  }

  &.small-gutter > .inside {
    padding-left:  divide(sub($grid-gutter-width, $grid-gutter-small-width), 2);
    padding-right: divide(sub($grid-gutter-width, $grid-gutter-small-width), 2);
  }
}

@include init-spacings(map-get($spacings-list, 'init'));

@include set-spacing-properties($spacings-list, 's');

@include set-spacing-properties($spacings-list, 'm') {
  .x-spacing-large {
    --art-wdth: #{$x-spacing-large-m};
  }
};

@include set-spacing-properties($spacings-list, 'l') {
  [class*='x-spacing'] {

    &.small-gutter > .inside {
      padding-left: 0;
      padding-right: 0;
    }
  }

  .x-spacing-medium {
    --art-wdth: #{sub(map-get($breakpoints, 'l'), $grid-gutter-width, 'px')};

    &.small-gutter {
      --art-wdth: #{sub(map-get($breakpoints, 'l'), $grid-gutter-small-width, 'px')};
    }
  }

  .x-spacing-large {
    --art-wdth: #{$x-spacing-large-l};
  }
};

@include set-spacing-properties($spacings-list, 'xl');

@media (min-width: sum($x-spacing-small, $grid-gutter-width, 'px')) {
  .x-spacing-small {
    --art-wdth: #{$x-spacing-small};
  }
}
