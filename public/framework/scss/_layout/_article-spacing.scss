// Class names
$class-horizontal-article-spacing:   'art-px';
$class-vertical-article-spacing:     'art-py';
$class-vertical-article-spacing-top: 'art-pt';
$class-vertical-article-spacing-btm: 'art-pb';

$art-space-abbr: (
  width:   art-wdth,
  spacing: art-px,
  1: 1,
  2: 2,
  3: 3
);

$spacings-list-init: (
  1: $article-spacing-xs-small,
  2: $article-spacing-xs-medium,
  3: $article-spacing-xs-large
);

$spacings-list-bp: (
  s: (
    1: $article-spacing-s-small,
    2: $article-spacing-s-medium,
    3: $article-spacing-s-large
  ),
  m: (
    1: $article-spacing-m-small,
    2: $article-spacing-m-medium,
    3: $article-spacing-m-large
  ),
  l: (
    1: $article-spacing-l-small,
    2: $article-spacing-l-medium,
    3: $article-spacing-l-large
  ),
  xl: (
    1: $article-spacing-xl-small,
    2: $article-spacing-xl-medium,
    3: $article-spacing-xl-large
  )
);

// Add default bottom-padding to #main articles
main .article_inside {
  padding-bottom: var(--v-gap);
}

$abbr-wdth: map-get($art-space-abbr, width);
$abbr-spc:  map-get($art-space-abbr, spacing);

[class*=#{$class-horizontal-article-spacing}] {

  &, #container {

    > .inside {
      width:         var(--#{$abbr-wdth}, auto);
      padding-left:  var(--#{$abbr-spc}, 0);
      padding-right: var(--#{$abbr-spc}, 0);
      margin-left:   auto;
      margin-right:  auto;
    }
  }

  &.small-gutter {
    --#{$abbr-spc}: #{divide(sub($grid-gutter-width, $grid-gutter-small-width), 2)};
  }

  &.no-gutter {
    --#{$abbr-spc}: #{divide($grid-gutter-width, 2)};
  }
}

// Set custom properties
:root {
  @each $size, $spacing in $spacings-list-init {
    --#{$abbr-spc}-#{map-get($art-space-abbr, $size)}: #{$spacing};
  }
}

@each $size, $spacing in $spacings-list-init {
  .#{$class-vertical-article-spacing}-#{$size} {
    $v-art-pd: #{$abbr-spc}-#{map-get($art-space-abbr, $size)};
    &, #container {
      > .inside {
        padding-top:    var(--#{$v-art-pd});
        padding-bottom: var(--#{$v-art-pd});
      }
    }
  }
}

@each $size, $spacing in $spacings-list-init {
  .#{$class-vertical-article-spacing-top}-#{$size} {
    > .inside {
      padding-top: var(--#{$abbr-spc}-#{map-get($art-space-abbr, $size)});
    }
  }
  .#{$class-vertical-article-spacing-btm}-#{$size} {
    > .inside {
      padding-bottom: var(--#{$abbr-spc}-#{map-get($art-space-abbr, $size)});
    }
  }
}

@each $bp in map-keys($breakpoints) {
  $infix: breakpoint-infix($bp);
  @include media-breakpoint($bp) {

    $list: map-get($spacings-list-bp, $bp);

    @if map-has-key($spacings-list-bp, $bp) {
      :root {
        @each $size, $spacing in $list {
          --#{$abbr-spc}-#{map-get($art-space-abbr, $size)}: #{$spacing};
        }
      }
    }

    @if ($bp == 'm') {
      .#{$class-horizontal-article-spacing} {

        &-#{map-get($art-space-abbr, 3)} {
          --#{$abbr-wdth}: #{$x-spacing-large-m};
        }
      }
    }

    @else if ($bp == 'l') {
      [class*=#{$class-horizontal-article-spacing}].small-gutter {
        --art-px: 0;
      }

      .#{$class-horizontal-article-spacing} {

        &-#{map-get($art-space-abbr, 2)} {
          --#{$abbr-wdth}: #{sub(map-get($breakpoints, 'l'), $grid-gutter-width, 'px')};

          &.small-gutter {
            --#{$abbr-wdth}: #{sub(map-get($breakpoints, 'l'), $grid-gutter-small-width, 'px')};
          }
        }

        &-#{map-get($art-space-abbr, 3)} {
          --#{$abbr-wdth}: #{$x-spacing-large-l};
        }
      }
    }
  }
}

@media (min-width: sum($x-spacing-small, $grid-gutter-width, 'px')) {
  .#{$class-horizontal-article-spacing} {

    &-#{map-get($art-space-abbr, 1)} {
      --#{$abbr-wdth}: #{$x-spacing-small};
    }
  }
}
