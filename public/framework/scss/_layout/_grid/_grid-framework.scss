.grid {
  --v-gap:var(--gtr-btm);
  --justify:normal;
  --flex-items:normal;

  > .inside {
    // Negative margin to counter offset
    margin-left:  var(--h-gap-off,0);
    margin-right: var(--h-gap-off,0);

    --i-gtr:var(--gtr-half);

    position: relative;

    display: flex;
    flex: 0 1 auto;
    flex-wrap: wrap;
    flex-direction: row;

    justify-content: var(--justify);
    align-items:     var(--flex-items);
    row-gap:         var(--v-gap);

    > * {
      flex-grow:   0;
      flex-shrink: 0;
      flex-basis:  100%;
      max-width:   100%;

      padding-right: var(--i-gtr);
      padding-left:  var(--i-gtr);
    }

    // Nested grids
    > .grid {
      --h-gap-off:calc(-1 * var(--i-gtr));
    }
  }
}

[class*=col-] {
  // Resets
  --col-amt:#{$grid-columns};
  --col-algn:auto;
  --col-off:0;
  --col-order:0;

  --col-wdth:calc(var(--col-amt) / var(--columns) * 100%);
  --col-ml:calc(var(--col-off) / var(--columns) * 100%);

  margin-left:var(--col-ml)!important;
  max-width:var(--col-wdth)!important;
  flex-basis:var(--col-wdth)!important;
  align-self:var(--col-algn)!important;
}

$grid-bps: map-merge((0:0),$breakpoints);
@each $bp in map-keys($grid-bps) {
  $infix: breakpoint-infix($bp);
  @include media-breakpoint($bp, $grid-bps) {
    .col#{$infix} {
      &-top      {--col-algn:flex-start;}
      &-middle   {--col-algn:center;}
      &-bottom   {--col-algn:flex-end;}
      &-baseline {--col-algn:baseline;}
      &-stretch  {--col-algn:stretch;}
      &-auto     {
        --col-amt:#{$grid-columns};
        flex-grow:1!important;
        flex-basis:0!important;
      }
    }

    .order#{$infix} {
      &-first {order:-1;}
      &-last  {order:#{$grid-columns + 1};}
    }

    @for $i from 1 through $grid-columns {
      .col#{$infix}-#{$i} {--col-amt:#{$i};}
      .order#{$infix}-#{$i} {order:#{$i};}
    }

    @for $i from 0 through ($grid-columns - 1) {
      @if not ($infix == "" and $i == 0) {
        .offset#{$infix}-#{$i} {--col-off:#{$i};}
      }
    }
  }
}
