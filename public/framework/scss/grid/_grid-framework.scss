.grid {
  --v-gap: var(--gtr-btm);
  --flex-justify: normal;
  --flex-align:   normal;

  > .inside {
    --gtr-item: var(--gtr-half);

    position: relative;

    display: flex;
    flex: 0 1 auto;
    flex-wrap: wrap;
    flex-direction: row;

    justify-content: var(--flex-justify);
    align-items:     var(--flex-align);
    row-gap:         var(--v-gap);

    // Add padding-bottom for last row
    padding-bottom:  var(--v-gap);

    > * {
      flex-grow: 0;
      flex-shrink: 0;
      flex-basis: 100%;
      max-width: 100%;

      padding-right: var(--gtr-item);
      padding-left:  var(--gtr-item);
    }
  }

  &.small-gutter > .inside {
    --gtr-item: var(--gtr-half-sml);
  }

  &.no-gutter > .inside {
    --gtr-item: 0rem;
  }

  .grid {

    & > .inside {
      margin-left: -#{divide($grid-gutter-width, 2)};
      margin-right: -#{divide($grid-gutter-width, 2)};
      padding-bottom: 0;
    }

    &.small-gutter > .inside {
      margin-left: -#{divide($grid-gutter-small-width, 2)};
      margin-right: -#{divide($grid-gutter-small-width, 2)};
    }

    &.no-gutter > .inside {
      margin-left: 0;
      margin-right: 0;
    }
  }

  &.align-top             > .inside { align-items: flex-start }
  &.align-middle          > .inside { align-items: center }
  &.align-bottom          > .inside { align-items: flex-end }
  &.align-baseline        > .inside { align-items: baseline }
}

.auto-height {
  align-items: stretch;

  .inside {
    height: 100%;
  }
}

.justify {
  &-left          { --flex-justify: flex-start }
  &-center        { --flex-justify: center }
  &-right         { --flex-justify: flex-end }
  &-space-between { --flex-justify: space-between }
  &-space-around  { --flex-justify: space-around }
  &-space-evenly  { --flex-justify: space-evenly }
  &-revert        { --flex-justify: revert }
}

$grid-breakpoints: map-merge((0:0),$breakpoints);

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint($breakpoint, $grid-breakpoints) {

    .grid > .inside {

      @for $i from 1 through $grid-columns {
        > .col#{$infix}-#{$i} {
          flex-basis: shortPercentage($i / $grid-columns);
          max-width: shortPercentage($i / $grid-columns);
        }
      }

      > .col#{$infix}-auto {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
      }

      > .col#{$infix}-top     { align-self: flex-start; }
      > .col#{$infix}-middle  { align-self: center; }
      > .col#{$infix}-bottom  { align-self: flex-end;}
      > .col#{$infix}-baseline{ align-self: baseline; }
      > .col#{$infix}-stretch { align-self: stretch; }
      > .order#{$infix}-first { order: -1; }
      > .order#{$infix}-last  { order: $grid-columns + 1; }

      @for $i from 0 through $grid-columns {
        > .order#{$infix}-#{$i} { order: $i; }
      }

      @for $i from 0 through ($grid-columns - 1) {
        @if not ($infix == "" and $i == 0) {
          > .offset#{$infix}-#{$i} {
            margin-left: shortPercentage($i / $grid-columns);
          }
        }
      }
    }
  }
}
