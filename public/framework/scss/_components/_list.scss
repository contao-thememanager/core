ul, ol {
  // Always reset count due to grid-lists
  --i:1;
  --i-v-gap:#{rem(3)};
  margin: 0;
  column-count:var(--i, auto);
}

li {
  .c_list &, & { // Raise specificity to override layout from download element icons
    padding-top: var(--i-v-gap);
    padding-bottom: var(--i-v-gap);
  }

  .c_list.flow-y & { width: calc(100% / var(--i)); }

  // Avoid column breaks for MacOS and Safari
  .c_list & {
    -webkit-column-break-inside: avoid;
    page-break-inside: avoid;
    break-inside: avoid;
  }
}

.c_list {
  &.small-gutter  {--i-v-gap:calc(var(--gtr-btm-sml)/2);}
  &.medium-gutter {--i-v-gap:calc(var(--gtr-btm)/2);}
  &.flow-y        {--i-v-gap:#{rem(3)};--h-gap:0;}
  &.flow-auto     {@extend %list-auto;--i-v-gap: 0;--h-gap:var(--v-gap);justify-content:var(--flex-justify);};
}

.li {
  &-icon { list-style: none; padding-inline-start: rem(20); }
  &-none { list-style: none; padding-inline-start: 0; }
  &-clr {
    li::marker, [class^="i-"]:before, [class*=" i-"]:before {
      color: var(--li-clr, inherit);
    }
  }
}

.color-li {
  &-base      { --li-clr:var(--text-clr-base); }
  &-inv       { --li-clr:var(--text-clr-invert); }
  &-primary   { --li-clr:var(--clr-primary); }
  &-secondary { --li-clr:var(--clr-secondary); }
  &-dark      { --li-clr:var(--clr-dark); }
  &-light     { --li-clr:var(--clr-light); }
}
