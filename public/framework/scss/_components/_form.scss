// Reset column grid inside widgets
.widget * {
  --col-amt:#{$grid-columns};
  --col-algn:auto;
  --col-off:0;
  --col-order:0;
}

%form-mandatory-styles {
  display: block;
  content: '*';

  position: absolute;
  top: 5px;
  right: var(--mand-r,5px);

  font-size: 15px;
  color: var(--mand-clr,#{$form-input-mandatory-symbol-color});
  line-height: 1;
}

%form-error-styles {
  color: $form-input-color-error;
  background: $form-input-background-error;
  border-color: $form-input-border-color-error;
  --form-clr-ph: #{$form-input-placeholder-color-error};
}

::-webkit-input-placeholder { color: var(--form-clr-ph); }
::-moz-placeholder { color: var(--form-clr-ph); }

label,
legend {
  display: inline-block;
  color: var(--form-clr-label);
  font-size: $form-label-font-size;
  margin-bottom: $form-label-spacing;
}

label {
  font-weight: $form-label-font-weight;
}

legend {
  width: 100%;
  font-weight: $form-legend-font-weight;
}

select {
  text-overflow: '';
  -webkit-appearance: none;
  -moz-appearance: none;

  option {
    color: $form-select-option-color;
    background-color: $form-select-option-background;

    &[disabled] { color: $form-input-color-disabled; }
  }

  &.multiselect {
    resize: vertical;
    height: $form-multiselect-height;
  }
}

select,
input,
textarea {
  font-family: $form-input-font-family;
  font-weight: $form-input-font-weight;
  font-size: $form-input-font-size;

  color: var(--form-clr-txt);
  background-color: var(--form-clr-bg);

  border-color: var(--form-clr-border);
  border-width: $form-input-border-width;
  border-style: $form-input-border-style;
  border-radius: $form-input-border-radius;

  padding: $form-input-padding;
  outline: none;
  width: 100%;

  &:-webkit-autofill {
    -webkit-text-fill-color: $form-input-color;
    -webkit-box-shadow: 0 0 0 1000px rgba(255,255,255,0) inset;
    transition: background-color 5000s ease-in-out 0s;
  }

  &:hover {
    --form-clr-bg: #{$form-input-background-hover};
    --form-clr-border: #{$form-input-border-color-hover};
    --form-clr-ph: #{$form-input-placeholder-color-hover};
  }

  &:focus {
    --form-clr-bg: #{$form-input-background-focus};
    --form-clr-border: #{$form-input-border-color-focus};
    --form-clr-ph: #{$form-input-placeholder-color-hover};
  }

  .widget.error & {

    &:not(:valid) {
      @extend %form-error-styles;
    }
  }
}

select,
input {
  height: $form-input-height;
}

textarea {
  resize: vertical;
  line-height: $form-textarea-line-height;
}

.widget {

  &,.input-container {
    position: relative;
  }

  // reset
  &-textarea,
  &-range {

    .input-container {
      font-size: 0;
    }
  }

  // states
  &.error {
    --mand-clr:#{$form-input-mandatory-symbol-color-error};

    p.error {
      color: $form-input-color-error;
      font-size: $form-input-font-size-error;
    }
  }

  &.mandatory {
    .input-container:after { @extend %form-mandatory-styles; }
  }

  &-checkbox,
  &-radio,
  &-range {
    --mand-r:#{sum(divide($grid-gutter-small-width, 2), 5px, 'px')};

    &.mandatory:after { @extend %form-mandatory-styles; }
  }

  // select-symbol
  &.select .input-container {

    &:before {
      display: inline-block;
      content: $form-select-symbol;
      font-family: $form-select-symbol-font-family;

      position: absolute;
      bottom: #{divide(sub($form-input-height, $form-select-symbol-font-size, 'px'), 2)};
      right: 12px;

      line-height: 1;
      height: 1em;
      width: 1em;
      font-size: $form-select-symbol-font-size;

      text-align: center;
      text-decoration: inherit;
      text-transform: none;

      color: $form-select-symbol-color;

      pointer-events: none;
      speak: none;

      transform-origin: center;
      transition: transform .2s;
    }

    &:focus-within {

      &:before {
        transform: rotateZ(180deg);
      }
    }
  }

  // checkbox & -radio styles
  &-checkbox,
  &-radio {

    input {
      position: absolute;
      opacity: 0;
      z-index: 1;
      width: 1px;

      &:checked + label {

        &:before {
          border-color: $form-checkbox-radio-border-color-focus;
          background-color: $form-checkbox-radio-background-focus;
        }

        &:after {
          display: inline-block;
          content: $form-checkbox-radio-symbol;
          font-family: $form-checkbox-radio-symbol-font-family;

          position: absolute;
          left: 1px;
          top: 1px;

          width: sub($form-checkbox-radio-size, 1px, 'px');
          line-height: $form-checkbox-radio-size;
          color: var(--cbx-symbol-clr);

          // Calculation: Do not allow font-sizes bigger than the width of the the checkbox
          $checkboxInnerWidth: sub($form-checkbox-radio-size, multiply($form-checkbox-radio-border-width, 2), 'px');
          font-size: minUnit($form-checkbox-radio-symbol-font-size, $checkboxInnerWidth, 'px');

          text-decoration: inherit;
          text-align: center;
          text-transform: none;
        }
      }
    }

    label {
      display: block;
      position: relative;
      z-index: 2;

      color: var(--cbx-clr-label);
      font-size: $form-checkbox-radio-label-font-size;
      // Calculate offset for the label
      padding-left: sum($form-checkbox-radio-size, 10px, 'px');
      margin-bottom: 0;

      cursor: pointer;

      &:before {
        display: inline-block;
        content: '';

        position: absolute;
        top: 1px;
        left: 0;

        width: $form-checkbox-radio-size;
        height: $form-checkbox-radio-size;

        border-width: $form-checkbox-radio-border-width;
        border-style: $form-checkbox-radio-border-style;
        border-color: var(--cbx-bdr-clr);
        border-radius: $form-checkbox-border-radius;

        background-color: var(--cbx-bg-clr);

        vertical-align: middle;
      }

      &:hover:before {
        border-color: var(--cbx-bdr-clr-hvr);
        background-color: var(--cbx-bg-clr-hvr);
      }
    }

    legend {
      padding: 0;
    }

    &.mandatory {

      label {
        padding-right: 15px;
      }

      &:after {
        bottom: initial;
        top: 0;
      }
    }
  }

  &-radio {

    label:before {
      border-radius: 50%;
    }
  }

  &-range {

    .input-container:after {
      content: none !important;
    }

    input {
      height: inherit;
      padding: 0;
      margin: 0;
    }
  }

  &-upload {

    input {
      height: inherit;
    }
  }

  &-explanation {

    p {
      color: var(--form-clr-exp);
      font-size: $form-input-explanation-font-size;
    }
  }

  &-captcha {
    display: flex;
    flex-direction: column;

    > *           { order: 1; }
    .captcha_text { order: 2; }
    input         { order: 3; }
  }
}

// Form-validation
@if ($form-validation == 'Focus') {
  input,
  select,
  textarea {
    &:required:focus:invalid {
      @extend %form-error-styles;
    }
  }
}

@else if ($form-validation == 'Always') {
  input,
  select,
  textarea {
    &:required:invalid {
      @extend %form-error-styles;
    }
  }
}
